package com.devtiro.jdbctemplate.dao.impl;

import static org.mockito.Mockito.verify;

import javax.swing.tree.RowMapper;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.ArgumentMatchers;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.core.PreparedStatementSetter;

import com.devtiro.jdbctemplate.dao.impl.AuthorDaoImpl;

import static org.hamcrest.Matchers.any;
import static org.mockito.ArgumentMatchers.eq;
import com.devtiro.jdbctemplate.domain.Author;

@ExtendWith(MockitoExtension.class)
public class AuthorDaoImplTest {
	
	@Mock
	private JdbcTemplate jdbcTemplate;
	
	@InjectMocks
	private AuthorDaoImpl underTest;
	
	@Test
	public void testThatCreateAuthorGeneratesCorrctSql() {
		Author author = Author.builder()
				.id(1L)
				.name("Abigail Rose")
				.age(80)
				.build();
		underTest.create(author);
		
		verify(jdbcTemplate).update(
                eq("INSERT INTO authors (id, name, age) VALUES (?, ?, ?)"),
                eq(1L), eq("Abigail Rose"), eq(80));
	}
	
	@Test
	public void testThatFindOneGeneratesTheCorrectSql() {
		underTest.findOne(1L);
		verify(jdbcTemplate).query(
                "SELECT id, name, age FROM authors WHERE id = ? LIMIT 1",
                ArgumentMatchers.<AuthorDaoImpl.AuthorRowMapper>any(),
                eq(1L)
        );
	}

}
